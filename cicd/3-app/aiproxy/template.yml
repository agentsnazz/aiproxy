AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Provision an instance of the Javabuilder service. Empty the ContentBucket before deleting this Stack.
Parameters:
  BaseDomainName:
    Type: String
    Description: Base domain name (e.g. 'code.org' in 'aiproxy.code.org').
  # BaseDomainNameHostedZonedID:
  #   Type: String
  #   Description: AWS Route53 Hosted Zone ID for base domain name.
  SubdomainName:
    Type: String
    Description: Subdomain name for javabuilder service (e.g. 'javabuilder' in 'javabuilder.code.org').
  AppImageUri:
    Type: String
    Description: URI of the Docker image in ECR.

# Conditions:
#   IsDevCondition: !Equals [!Ref BaseDomainName, "dev-code.org"]

Resources:

  HostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !Sub "${SubdomainName}.${BaseDomainName}."

  Domain:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub "${BaseDomainName}."
      Name: !Sub "${SubdomainName}.${BaseDomainName}"
      Type: A
      TTL: 300
      ResourceRecords:
        - 8.8.8.8
  
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: MyLoadBalancer
      # TODO configure this more intentionally
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Subnets:
        # TODO: This copies geocoder, but we should probably have a separate subnet for this service.
        - !ImportValue VPC-SubnetB
        - !ImportValue VPC-SubnetC
      Scheme: internet-facing

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ECSTargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  ECSTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 5000
      Protocol: HTTP
      TargetType: ip
      # TODO: This copies geocoder, but we should probably have a separate VPC for this service.
      VpcId: !ImportValue VPC

  ECSCluster:
    Type: "AWS::ECS::Cluster"

  ECSService:
    Type: "AWS::ECS::Service"
    DependsOn: LoadBalancerListener
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 2
      LaunchType: FARGATE
      TaskDefinition: !Ref ECSTaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups: 
            - !Ref ECSSecurityGroup
          Subnets:
            # TODO: This copies geocoder, but we should probably have a separate subnet for this service.
            - !ImportValue VPC-SubnetB
            - !ImportValue VPC-SubnetC
      LoadBalancers:
        - ContainerName: webserver
          ContainerPort: 5000
          TargetGroupArn: !Ref ECSTargetGroup

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Security Group for ECS Service
      # TODO: This copies geocoder, but we should probably have a separate VPC for this service.
      VpcId: !ImportValue VPC

  ECSTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      Family: webserver
      Cpu: '256'
      Memory: '512'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !ImportValue AiProxyECSTaskExecutionRoleArn
      ContainerDefinitions:
        - Name: webserver
          Image: !Ref AppImageUri
          Memory: 512
          Cpu: 256
          Essential: true
          PortMappings:
            - ContainerPort: 5000
              HostPort: 5000
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ECSTaskLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${AWS::StackName}"

Outputs:
  AiProxyURL:
    Value:
      !Ref Domain
